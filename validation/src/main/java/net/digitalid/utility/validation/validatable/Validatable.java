/*
 * Copyright (C) 2017 Synacts GmbH, Switzerland (info@synacts.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.digitalid.utility.validation.validatable;

import net.digitalid.utility.annotations.method.CallSuper;
import net.digitalid.utility.annotations.method.Pure;
import net.digitalid.utility.contracts.exceptions.InvariantException;
import net.digitalid.utility.validation.annotations.type.Mutable;

/**
 * This interface allows to validate the invariant of implementing classes.
 */
@Mutable
public interface Validatable {
    
    /**
     * Validates the invariant and all non-private fields of this object.
     * Typically, the programmer implements this method to check all non-
     * trivial invariants which cannot be expressed through annotations
     * and the field checks are generated by an annotation processor in
     * a subclass by overriding this method and calling the supermethod.
     * 
     * @throws InvariantException if the invariant is violated.
     */
    @Pure
    @CallSuper
    public default void validate() {}
    
}
