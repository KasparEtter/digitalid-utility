package net.digitalid.utility.generator.interceptors;


import javax.annotation.Nonnull;

import net.digitalid.utility.annotations.method.Pure;
import net.digitalid.utility.generator.annotations.generators.GenerateSubclass;
import net.digitalid.utility.generator.annotations.interceptors.Caught;
import net.digitalid.utility.testing.RootTest;
import net.digitalid.utility.validation.annotations.type.Immutable;

import org.junit.Test;

@Immutable
@GenerateSubclass
class CaughtException {
    
    @Pure
    @Caught
    void method() throws Exception {
        throw new Exception();
    }
    
}

public class CaughtTest extends RootTest {
    
    // Test interceptors on methods with and without return types and in the former case also generics.
    
    // Also test that the implementation of abstract methods can be generated by interceptors (with a test annotation like @GenerateImplementation?).
    
    @Test
    public void testCatching() throws Exception {
        final @Nonnull CaughtExceptionSubclass object = new CaughtExceptionSubclass();
        object.method();
    }
    
}
