/*
 * Copyright (C) 2017 Synacts GmbH, Switzerland (info@synacts.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.digitalid.utility.generator.interceptors;


import javax.annotation.Nonnull;

import net.digitalid.utility.annotations.method.Pure;
import net.digitalid.utility.generator.annotations.generators.GenerateSubclass;
import net.digitalid.utility.generator.annotations.interceptors.Caught;
import net.digitalid.utility.testing.UtilityTest;
import net.digitalid.utility.validation.annotations.type.Immutable;

import org.junit.Test;

@Immutable
@GenerateSubclass
class CaughtException {
    
    @Pure
    @Caught
    void method() throws Exception {
        throw new Exception();
    }
    
}

public class CaughtTest extends UtilityTest {
    
    // Test interceptors on methods with and without return types and in the former case also generics.
    
    // Also test that the implementation of abstract methods can be generated by interceptors (with a test annotation like @GenerateImplementation?).
    
    @Test
    public void testCatching() throws Exception {
        final @Nonnull CaughtExceptionSubclass object = new CaughtExceptionSubclass();
        object.method();
    }
    
}
